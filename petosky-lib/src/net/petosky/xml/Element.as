package net.petosky.xml {	import net.petosky.util.ArrayUtils;		import net.petosky.util.StringUtils;			/**	 * @author cpetosky	 */	public dynamic class Element extends Node {		private static var inlineTags:Array = [			"a",			"b",			"br",			"font",			"i",			"img",			"span",			"u"			];				private var _children:NodeList = new NodeList();				public function Element(parent:Element, content:XML) {			super(parent, content.name().localName);						// Store element contents/children			for each (var node:XML in content.children()) {				switch (node.nodeKind()) {					case "text":						addTextNode(node);						//_children.push(new TextNode(this, node.toString()));						break;					case "element": 						if (Document.ignoreInlineTags && ArrayUtils.contains(inlineTags, node.name().localName)) {							addTextNode(node);						} else {							_children.push(new Element(this, node));						}						break;				}			}						// Store element attributes			for each (var attribute:XML in content.@*) {				this[attribute.name().localName] = attribute.toString();			}		}				public function child(o:Object):Node {			if (o is Number)				return _children[o as Number];			return null;		}				public function get numChildren():uint {			return _children.length;		}				private function get lastTextNode():TextNode {			for (var i:int = _children.length - 1; i >= 0; --i)				if (_children.at(i) is TextNode)					return _children.at(i) as TextNode;								return null;		}				private function addTextNode(node:XML):void {			var t:TextNode = lastTextNode;			if (t == null) {				t = new TextNode(this, node.toXMLString());				_children.push(t);			} else {				t.text += " " + node.toXMLString();			}						}					override public function get type():String {			return NodeType.ELEMENT;		}				public override function toString(tabLevel:uint = 0):String {			var s:String = StringUtils.repeat("\t", tabLevel);			s += "<" + name + " ";			for (var key:String in this)				s += key + '="' + this[key] + '" ';			s = s.substr(0, s.length - 1) + ">\n";			for each (var child:Node in _children) {				s += child.toString(tabLevel + 1) + "\n";			}			s += StringUtils.repeat("\t", tabLevel);			s += "</" + name + ">";			return s;		}	}}