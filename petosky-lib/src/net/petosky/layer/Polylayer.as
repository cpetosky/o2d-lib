package net.petosky.layer {	import flash.display.DisplayObject;			/**	 * @author cpetosky	 */	public class Polylayer extends AbstractLayer {		public function Polylayer(name:String) {			super(name);		}						override public function clear():void {			while (numChildren > 0)				removeChildAt(0);		}		override public function remove(...args):Boolean {			var removed:Boolean = false;						for each (var d:DisplayObject in args) {				try {					removeChild(d);					removed = true;				} catch (error:Error) { }			}						return true;		}				override public function add(...args):Boolean {			return addArray(args);		}		override public function addArray(a:Array):Boolean {			for each (var d:DisplayObject in a)				addDisplayObject(d);			return true;		}				override public function toArray():Array {			var length:uint = numChildren;			var a:Array = [];			for (var i:uint = 0; i < length; ++i)				a.push(getChildAt(i));			return a;		}				override public function get length():uint {			return numChildren;		}				override public function get empty():Boolean {			return numChildren > 0;		}		override public function addChild(d:DisplayObject):DisplayObject {			addDisplayObject(d);			return d;		}						override public function addChildAt(d:DisplayObject, index:int):DisplayObject {			addDisplayObjectAt(d, index);			return d;		}	}}