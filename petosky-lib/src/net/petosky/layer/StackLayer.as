package net.petosky.layer {	import flash.display.DisplayObject;	import net.petosky.collections.ArrayStack;	import net.petosky.collections.IStack;	import net.petosky.collections.TypedStack;			/**	 * @author cpetosky	 */	public class StackLayer extends AbstractLayer implements IStack {		private var _stack:IStack;				public function StackLayer(name:String) {			super(name);			_stack = new TypedStack(DisplayObject, new ArrayStack());		}				override public function clear():void {			_stack.clear();			while (numChildren > 0)				removeChildAt(0);		}		public function push(o:*):Boolean {			var b:Boolean = _stack.push(o);						addDisplayObject(o as DisplayObject);						return b;		}								override public function remove(...args):Boolean {			if (_stack.empty)				return false;			else {				pop();				return true;			}		}								public function pop():* {			removeChildAt(numChildren - 1);			return _stack.pop();		}								public function peek():* {			return _stack.peek();		}								override public function add(...args):Boolean {			return addArray(args);		}								override public function addArray(a:Array):Boolean {			var b:Boolean = _stack.addArray(a);						for each (var d:DisplayObject in a)				addDisplayObject(d);						return b;		}								override public function toArray():Array {			return _stack.toArray();		}						override public function get length():uint {			return _stack.length;		}						override public function get empty():Boolean {			return _stack.empty;		}	}}