package net.petosky.util {	/**	 * @author cpetosky	 */	public dynamic class Matrix extends Array {				public static function identity(size:uint):Matrix {			var m:Matrix = new Matrix(size, size);			for (var i:uint = 0; i < size; ++i)				m[i][i] = 1;							return m;		}				public function Matrix(rows:uint, columns:uint) {			super();						for (var i:uint = 0; i < rows; ++i) {				var row:Array = new Array();				for (var j:uint = 0; j < columns; ++j)					row.push(0);				push(row);			}				}				public function get rows():uint {			return length;		}				public function get columns():uint {			return this[0].length;		}				public function times(m:Matrix):Matrix {			if (columns != m.rows)				throw new ArgumentError("[Matrix.times] Dimension mismatch.");							var m2:Matrix = new Matrix(rows, m.columns);						for (var i:uint = 0; i < rows; ++i)				for (var j:uint = 0; j < m.columns; ++j)					for (var k:uint = 0; k < columns; ++k)						m2[i][j] += this[i][k] * m[k][j];									return m2;		}				public function toString():String {			var s:String = "";						for (var i:uint = 0; i < rows; ++i) {				s += "[ " + this[i][0];				for (var j:uint = 1; j < columns; ++j) {					s += "\t" + this[i][j];				}				s += " ]\n";			}						return s;		}	}}