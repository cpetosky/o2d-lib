package net.petosky.collections {	import flash.utils.describeType;			/**	 * A TypedList wraps any other IList to provide run-time type checking.	 * 	 * @author cpetosky	 */	public class TypedList extends BaseListDecorator {		private var _klass:Class;		private var _className:String;		public function TypedList(klass:Class, list:IList) {			super(list);			_klass = klass;			_className = describeType(_klass).@name;						for (var i:uint = 0; i < list.length; ++i)				if (!(list.getItem(i) is klass))					throw new TypeError(						"[TypedList<" + _className + ">.iinit] Attempted to enforce " + 						_className + " on a list with elements of type " + 						describeType(list.getItem(i)).@name + "."					);		}				override public function setItem(index:uint, value:Object):Object {			if (!(value is _klass))				throw new TypeError(					"[TypedList<" + _className + ">.set] " +					"Attempted to set an element with type " +					describeType(value).@name + "."				);			return _list.setItem(index, value);		}				override public function insertArray(index:uint, a:Array):Boolean {			for each (var o:* in a)				if (!(o is _klass))					throw new TypeError(						"[TypedList<" + _className + ">.insert] " +						"Attempted to insert an element with type " +						describeType(o).@name + "."					);								return _list.insertArray(index, a);		}		override public function indexOf(o:Object):int {			if (!(o is _klass))				throw new TypeError(					"[TypedList<" + _className + ">.indexOf] " +					"Attempted to find the index of an element with type " +					describeType(o).@name + "."				);			return _list.indexOf(o);		}				override public function addArray(a:Array):Boolean {			for each (var o:* in a)				if(!(o is _klass))					throw new TypeError(						"[TypedList<" + _className + ">.add] " +						"Attempted to add an element with type " +						describeType(o).@name + "."					);			return _list.addArray(a);		}		override public function removeArray(a:Array):Boolean {			for each (var o:* in a)				if(!(o is _klass))					throw new TypeError(						"[TypedList<" + _className + ">.add] " +						"Attempted to remove an element with type " +						describeType(o).@name + "."					);			return _list.removeArray(a);		}	}}