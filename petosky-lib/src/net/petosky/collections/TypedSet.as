package net.petosky.collections {	/**	 * @author cpetosky	 */	public class TypedSet implements ISet {		private var _type:Class;		private var _set:ISet;				public function TypedSet(type:Class, theSet:ISet) {			_type = type;			_set = theSet;		}				public function clear():void {			_set.clear();		}				public function add(...args):Boolean {			return addArray(args);		}				public function addArray(a:Array):Boolean {			for each (var d:* in a)				if (!(d is _type))					throw new TypeError("[TypedSet.push] This set can only contain objects of type " + _type);			return _set.addArray(a);		}		public function contains(d:*):Boolean {			if (d is _type)				return _set.contains(d);			else				throw new TypeError("[TypedSet.contains] This set can only contain objects of type " + _type);		}				public function remove(d:*):Boolean {			if (d is _type)				return _set.remove(d);			else				throw new TypeError("[TypedSet.remove] This set can only contain objects of type " + _type);		}				public function toString():String {			return _set.toString();		}				public function get length():uint {			return _set.length;		}				public function get empty():Boolean {			return _set.empty;		}				public function toArray():Array {			return _set.toArray();		}	}}