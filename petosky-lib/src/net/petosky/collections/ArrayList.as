package net.petosky.collections {	import net.petosky.util.ArrayUtils;import net.petosky.collections.compare.generateComparator;		/**	 * @author cpetosky	 */	public class ArrayList implements IList {		private var _array:Array;				/**		 * Creates a list by copying the provided list argument. If no argument		 * is provided, this creates an empty list.		 * 		 * Note that elements are copied by reference, so changes to the		 * elements in the new list will affect the old versions		 * 		 * @param list The source list to copy		 */		public function ArrayList(list:IList = null) {			_array = new Array();			if (list && !list.empty)				addArray(list.toArray());		}								/**		 * Each element addition runs in constant time.		 * 		 * @inheritDoc		 */		public function add(...args):Boolean {			return addArray(args);		}								/**		 * Each element addition runs in constant time.		 * 		 * @inheritDoc		 */		public function addArray(a:Array):Boolean {			for each (var o:* in a)				_array.push(o);			return true;		}		/**		 * This runs in linear time, based on the length of the list.		 * 		 * @inheritDoc		 */		public function remove(...args):Boolean {			return removeArray(args);		}								/**		 * This runs in linear time, based on the length of the list.		 * 		 * @inheritDoc		 */		public function removeArray(a:Array):Boolean {			var b:Boolean = false;			for (var i:uint = 0; i < length; ++i)				for (var j:uint = 0; j < a.length; ++j)					if (_array[i] == a[j]) {						_array.splice(i, 1);						a.splice(j, 1);						b = true;						--i;						break;					}								return b;		}						/**		 * @inheritDoc		 */		public function clear():void {			_array = [];		}				/**		 * @inheritDoc		 */		public function setItem(index:uint, value:Object):Object {			if (index >= length)				throw new RangeError("[ArrayList.setItem] Requested index " + index + " in list of length " + length);						var o:* = _array[index];			_array[index] = value;			return o;		}						/**		 * @inheritDoc		 */		public function insert(index:uint, ...args):Boolean {			return insertArray(index, args);		}								/**		 * @inheritDoc		 */		public function insertArray(index:uint, a:Array):Boolean {			if (index > length)				throw new RangeError("[ArrayList.insert] Requested index " + index + " in list of length " + length);			ArrayUtils.spliceArray(_array, index, 0, a);			return true;		}								/**		 * @inheritDoc		 */		public function getItem(index:uint):Object {			if (index >= length)				throw new RangeError("[ArrayList.getItem] Requested index " + index + " in list of length " + length);						return _array[index];		}								/**		 * @inheritDoc		 */		public function getFirstByProperty(propName:String, propValue:Object):Object {			for (var i:uint = 0; i < _array.length; ++i)				if (_array[i].hasOwnProperty(propName) && _array[i][propName] == propValue)					return _array[i];			return null;		}						/**		 * @inheritDoc		 */		public function indexOf(o:Object):int {			for (var i:uint = 0; i < length; ++i)				if (_array[i] == o)					return i;			return -1;		}								/**		 * @inheritDoc		 */		public function get length():uint {			return _array.length;		}								/**		 * True if there are no elements in this list.		 */		public function get empty():Boolean {			return _array.length == 0;		}								/**		 * Returns the string representation of every list element in order.		 */		public function toString():String {			var s:String = "";			for each (var o:* in _array)				s += o + ", ";			return s.substr(0, s.length - 2);		}								/**		 * Returns a copy of all elements as an array.		 */		public function toArray():Array {			return _array.concat();		}								public function getListIterator():IListIterator {			return new ArrayListIterator(this, _array);		}				public function sort(sortProperty:String = "", ascending:Boolean = true):void {			_array.sort(generateComparator(sortProperty, ascending));		}	}}